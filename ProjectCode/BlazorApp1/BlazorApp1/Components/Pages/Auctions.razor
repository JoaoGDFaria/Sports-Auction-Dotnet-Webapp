@page "/{userID:long}/{category:int}/auctions/{page:int?}"
@rendermode InteractiveServer

@inject IConfiguration _config
@inject ISqlDataAccess _data
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components


@using DataLibrary

<PageTitle>Auctions</PageTitle>
    
    <Header userID="@GetCurrentUserID()" />

    <div class="cont">
        <div class="types">
            @if(GetCategory()==0){ <button type="button" class="butoum-clicked" @onclick="() => RedirectToCategory(0)">All</button> }
            else{ <button type="button" class="butoum" @onclick="() => RedirectToCategory(0)">All</button> }
            @foreach (var categoria in categorias){
                @if(GetCategory()==categoria.GetIdCategoria()){ <button type="button" class="butoum-clicked" @onclick="() => RedirectToCategory(categoria.GetIdCategoria())">@categoria.GetNome()</button> }
                else{ <button type="button" class="butoum" @onclick="() => RedirectToCategory(categoria.GetIdCategoria())">@categoria.GetNome()</button> }
            }
        </div>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @if (leiloes.Count != 0)
            {

                @for (int i = pagination.GetStartIndex(); i <= pagination.GetEndIndex(); i++){


                    Leilao leilao = leiloes[i];


                    <button class="itemButton" @onclick="() => RedirectToAuction(leilao.GetIdLeilao())">
                        <div class="item row g-0 ">
                                
                            <div class="imagem col-md-4 ">
                                <img src="./images/@leilao.GetImagemArtigo()" class="img-fluid " >
                            </div>

                            <div class="itemInfo col-md-8">
                                <h5 class="itemTitle">@leilao.GetNomeLeilao()</h5>
                                <p class="currentBid">Current bid:</p>
                                @if (leilao.GetHighestBid() == 0){ <p class="bid">None</p> }
                                else{ <p class="bid">$@leilao.GetHighestBid()</p> }
                                <p class="buyNow">Buy Now:</p>
                                <p class="buyNowPrice">$@leilao.GetPrecoCompraAutomaticoLeilao()</p>
                                <p class="timeLeft">Time left:</p>
                                <p class="itemTime"><small class="text-body-secondary">@GetTimeLeftOrEnded(leilao)</small></p>
                            </div>
                                
                        </div>
                    </button>
                }
            }

        </div> 

        @if (leiloes.Count != 0){
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-center mt-4">
                    @if ((pagination.GetCurrentPage() - 1) < 1){
                        <li class="page-item disabled"><a class="page-link" href="@($"{GetCurrentUserID()}/{GetCategory()}/auctions/{(pagination.GetCurrentPage() - 1)}")">Previous</a></li>
                    }
                    else{
                        <li class="page-item"><a class="page-link" href="@($"{GetCurrentUserID()}/{GetCategory()}/auctions/{(pagination.GetCurrentPage() - 1)}")">Previous</a></li>
                    }
                    @for (int i = 1; i <= pagination.GetTotalPages(); i++){
                        int currentPage = i;
                        @if (currentPage == 1){
                            <a class="page-link" href="@($"{GetCurrentUserID()}/{GetCategory()}/auctions")">@i</a>
                        }
                        else{
                            <a class="page-link" href="@($"{GetCurrentUserID()}/{GetCategory()}/auctions/{currentPage}")">@i</a>
                        }
                    }
                    @if ((pagination.GetCurrentPage() + 1) > pagination.GetTotalPages()){
                        <li class="page-item disabled"><a class="page-link" href="@($"{GetCurrentUserID()}/{GetCategory()}/auctions/{(pagination.GetCurrentPage() + 1)}")">Next</a></li>
                    }
                    else{
                        <li class="page-item"><a class="page-link" href="@($"{GetCurrentUserID()}/{GetCategory()}/auctions/{(pagination.GetCurrentPage() + 1)}")">Next</a></li>
                    }
                    
                </ul>
            </nav>
        }

        <a href="./login"  target="_top"><button type="button" class="btn btn-warning">LOG OUT</button></a>
    </div>

    <div class="container">
        <footer class="d-flex flex-wrap justify-content-between align-items-center py-3 my-4">

        </footer>
    </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
<link rel="stylesheet" href="css/auctions.css">


@code {

    [Parameter] public long? userID { get; set; }
    [Parameter] public int? category { get; set; }
    [Parameter] public int? page { get; set; }

    private List<Leilao> leiloes= new List<Leilao>();
    private List<Categoria> categorias = new List<Categoria>();
    private Pagination pagination = new Pagination();

    protected override async Task OnInitializedAsync()
    {
        BackgroundTimer.SetAllFalse();
        startBackgroundTimer();
        await LoadAuctions();
    }

    private async Task LoadAuctions(){

        DatabaseQueries dbQuery = new DatabaseQueries(_config, _data);

        if(await dbQuery.GetUser(GetCurrentUserID()) == false){
            NavigationManager.NavigateTo("/notfound");
        }

        leiloes = await dbQuery.GetAllAuctionsWithoutUser(GetCurrentUserID(), GetCategory());
        categorias = await dbQuery.GetAllCategories();
        
        pagination = new Pagination(leiloes.Count);
        bool flag = pagination.SetCurrentPage(GetCurrentPage());

        if (!flag)
        {
            NavigationManager.NavigateTo("/notfound");
        }
        

    }

    private int GetCurrentPage(){
        var currentUrl = NavigationManager.Uri;
        var pageStr = currentUrl.Split("/").Last();
        if (int.TryParse(pageStr, out var currentPage)){
            return currentPage;
        }
        else{
            return 1;
        }
    }

    private long GetCurrentUserID(){
        return userID ?? 0;
    }

    private int GetCategory(){
        return category ?? 0;
    }

    void RedirectToAuction(int auctionId)
    {
        NavigationManager.NavigateTo($"{userID}/buyMenu/{auctionId}");
    }

    void RedirectToCategory(int id){
        NavigationManager.NavigateTo($"{userID}/{id}/auctions");
    }


    private void startBackgroundTimer(){
        BackgroundTimer.SetHasStarted(0);
        Console.WriteLine("Starting background timer");
        _ = Task.Run(async () =>
        {
            while (BackgroundTimer.GetHasStarted(0))
            {
                await Task.Delay(TimeSpan.FromSeconds(1));
                await InvokeAsync(() => StateHasChanged());
                Console.WriteLine("State has changed");
            }
        });
    }


    private string GetTimeLeftOrEnded(Leilao leilao){
        DatabaseQueries dbQuery = new DatabaseQueries(_config, _data);
        string tempo = leilao.GetTimeLeft();
        if(tempo == "Ended"){
            if(leilao.GetHighestBid() == 0){
                dbQuery.updateEstadoLeilao(leilao.GetIdLeilao(), "Expirado");
            }
            else{
                dbQuery.updateEstadoLeilao(leilao.GetIdLeilao(), "Vendido");
            }
        }
        return tempo;
    }


}
