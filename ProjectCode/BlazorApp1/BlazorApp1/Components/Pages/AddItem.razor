@page "/{userID:long}/addItem"
@rendermode InteractiveServer
@inject IConfiguration _config
@inject ISqlDataAccess _data
@using System.Drawing
@inject NavigationManager NavigationManager


@using DataLibrary

<PageTitle>Add Item</PageTitle>

<Header userID="@GetCurrentUserID()" />

<div id="addItem" class="d-flex align-items-center justify-content-center vh-80">
    <div class="card bg-dark text-white">
        <div class="card-body p-5 text-center aux">
            <div class="row row-cols-1">
                <div class="form-outline form-white mb-4 field">
                    <p>Auction Name</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg"  @bind="NomeLeilao" />
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Select Image</p>
                    <InputFile id="uploadImage" class="form-control form-control-lg" OnChange="HandleFileUpload" />
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Minimum Bid Amount(€)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="PrecoBaseLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Item Name</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="NomeArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Authentication Number</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="NumeroAutenticacaoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Buy Now Price(€)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="PrecoCompraAutomaticoLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Athlete/Team/Event Name</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="NomeEquipaEventoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Size</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="TamanhoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Minimum Bid Increment(€)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="TaxaMinimaIncrementoLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Description</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="DescricaoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Condition</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="EstadoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Date of Use</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="DataUsoArtigo" />
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Auction Closing Date(min. 1 day)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="DataFinalizacaoLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Category</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="IdCategoria"/>
                </div>

                @if(nullError)
                {
                    <div class="alert alert-danger" role="alert">
                        Please fill all the fields.
                    </div>
                }

                @if(imageError)
                {
                    <div class="alert alert-danger" role="alert">
                        The image format is invalid.
                    </div>
                }
        
                @if(authNumberError)
                {
                    <div class="alert alert-danger" role="alert">
                        This authentication number is already in use.
                    </div>
                }

                @if(basePriceFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The start price should be less than 50,000€.
                    </div>
                }

                @if(authFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The authentication number must be a number and have no more than 10 digits.
                    </div>
                }

                @if(buyNowFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The buy now price should be less than 100,000€.
                    </div>
                }

                @if(incrementFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The minimum bid increment should be less than 1,000€.
                    </div>
                }

                @if(dateUseFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The date of use must be a valid date and in the past.
                    </div>
                }

                @if(dateClosingFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The auction closing date must be a valid date and at least 1 day in the future.
                    </div>
                }

                @if(categoryFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The category must be a number.
                    </div>
                }

                @if(dataError)
                {
                    <div class="alert alert-danger" role="alert">
                        Something went wrong, please try again.
                    </div>
                }

                <div class="button d-flex buttons">
                    <button type="button" class="btn btn-success" @onclick="SubmitForm">SUBMIT</button>
                    <button type="button" class="btn btn-danger">CANCEL</button>
                </div> 
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
<link rel="stylesheet" href="css/addItem.css">

@code {

    [Parameter] public long? userID { get; set; }
    public bool nullError { get; set; } = false;

    // Data base duplicate check
    public bool authNumberError { get; set; } = false;

    // Data format check
    public bool basePriceFormatError { get; set; } = false;
    public bool authFormatError { get; set; } = false;
    public bool buyNowFormatError { get; set; } = false;
    public bool incrementFormatError { get; set; } = false;
    public bool dateUseFormatError { get; set; } = false;
    public bool dateClosingFormatError { get; set; } = false; 
    public bool categoryFormatError { get; set; } = false;
    public bool dataError { get; set; } = false;
    public bool imageError { get; set; } = false;


    private string NomeLeilao { get; set; } = string.Empty;
    private IBrowserFile? ImagemArtigo { get; set; }
    private string Imagem{ get; set;} = string.Empty;
    private string PrecoBaseLeilao { get; set; } = string.Empty;
    private string NomeArtigo { get; set; } = string.Empty;
    private string NumeroAutenticacaoArtigo { get; set; } = string.Empty;
    private string PrecoCompraAutomaticoLeilao { get; set; } = string.Empty;
    private string NomeEquipaEventoArtigo { get; set; } = string.Empty;
    private string TamanhoArtigo { get; set; } = string.Empty;
    private string TaxaMinimaIncrementoLeilao { get; set; } = string.Empty;
    private string DescricaoArtigo { get; set; } = string.Empty;
    private string EstadoArtigo { get; set; } = string.Empty;
    private string DataUsoArtigo { get; set; } = string.Empty;
    private string DataFinalizacaoLeilao { get; set; } = string.Empty;
    private int IdCategoria { get; set; } = -1;

    private async Task SubmitForm()
    {
        DatabaseQueries test = new DatabaseQueries(_config, _data);

        int leiloes = await test.GetNumeroLeilao(); 
        
        byte[] imagemBytes = new byte[0];
        string nomeArquivo = string.Empty;

        // Clearing all errors
        nullError = false;

        authNumberError = false;

        basePriceFormatError = false;
        authFormatError = false;
        buyNowFormatError = false;
        incrementFormatError = false;
        dateUseFormatError = false;
        dateClosingFormatError = false;
        categoryFormatError = false;
        dataError = false;

        if(string.IsNullOrEmpty(NomeLeilao) ||
           string.IsNullOrEmpty(PrecoBaseLeilao) || 
           string.IsNullOrEmpty(NomeArtigo) || 
           string.IsNullOrEmpty(NumeroAutenticacaoArtigo) ||
           string.IsNullOrEmpty(PrecoCompraAutomaticoLeilao) ||
           string.IsNullOrEmpty(NomeEquipaEventoArtigo) ||
           string.IsNullOrEmpty(TamanhoArtigo) ||
           string.IsNullOrEmpty(TaxaMinimaIncrementoLeilao) ||
           string.IsNullOrEmpty(DescricaoArtigo) ||
           string.IsNullOrEmpty(EstadoArtigo) ||
           string.IsNullOrEmpty(DataUsoArtigo) ||
           string.IsNullOrEmpty(DataFinalizacaoLeilao)){

            nullError = true;
            return;
        
        }else{
            if(validateAuthNumber(NumeroAutenticacaoArtigo) &&
               validateBasePrice(PrecoBaseLeilao) &&
               validateBuyNow(PrecoCompraAutomaticoLeilao) &&
               validateIncrement(TaxaMinimaIncrementoLeilao) &&
               validateDateUse(DataUsoArtigo) &&
               validateDateClosing(DataFinalizacaoLeilao) && 
               (ImagemArtigo != null) &&
               validateImageFormat(ImagemArtigo)){

                bool authCheck = await test.isThereAuthNumber(NumeroAutenticacaoArtigo);
                if(authCheck){
                    authNumberError = true;
                    return;
                }

                imagemBytes = await ObterBytesDaImagem(ImagemArtigo);
                nomeArquivo = $"Auction{leiloes}.{ObterFormatoDaFoto(ImagemArtigo)}";
                
                Imagem = nomeArquivo;

                await SalvarImagemNoProjeto(ImagemArtigo, nomeArquivo);

        
                int rowsAffected = await test.AddItem(NomeLeilao, Imagem, PrecoBaseLeilao, 
                                                       NomeArtigo, NumeroAutenticacaoArtigo, 
                                                       PrecoCompraAutomaticoLeilao,
                                                       NomeEquipaEventoArtigo, TamanhoArtigo,
                                                       TaxaMinimaIncrementoLeilao, 
                                                       DescricaoArtigo, EstadoArtigo,
                                                       DataUsoArtigo, DataFinalizacaoLeilao, GetCurrentUserID(),IdCategoria);


                if (rowsAffected > 0)
                {
                    // Redirecting to myAuctions page
                    NavigationManager.NavigateTo($"/{userID}/myAuctions");
                    return;
                }
                else
                {
                    //  Something went wrong but we don't know what, so we just say something went wrong, 
                    // please try again, and we don't redirect, because we don't know what happened, so we 
                    // don't know if it's safe to redirect, so we just stay here, and we don't do anything, 
                    // because we don't know what happened, so we don't know what to do, so we just stay here,
                    // and we don't do anything, because we don't know what happened... 
                    dataError = true;
                    return;
                }
            }
            return;    
        }

    }

    private string ObterFormatoDaFoto(IBrowserFile file)
    {
        return Path.GetExtension(file.Name).TrimStart('.');
    }

    private async Task<byte[]> ObterBytesDaImagem(IBrowserFile imagem)
    {
        using (var memoryStream = new MemoryStream())
        {
            await imagem.OpenReadStream().CopyToAsync(memoryStream);
            return memoryStream.ToArray();
        }
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        ImagemArtigo = e.File;

        if (ImagemArtigo != null)
        {
            Console.WriteLine("OLAAAA");
        }
    }


    private async Task SalvarImagemNoProjeto(IBrowserFile file, string nomeArquivo)
    {
        try
        {
            @inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment _hostingEnvironment;
            var caminhoRoot = _hostingEnvironment.ContentRootPath;
            var caminhoDestino = Path.Combine(caminhoRoot, "C:/Users/hugoa/Desktop/ProjetoLI4/LI4/ProjectCode/BlazorApp1/BlazorApp1/wwwroot/images", nomeArquivo);

            // Certifique-se de que o diretório de destino existe
            Directory.CreateDirectory(Path.GetDirectoryName(caminhoDestino));

            // Copie o conteúdo do arquivo para o diretório de destino
            using (var stream = new FileStream(caminhoDestino, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
                Console.WriteLine("FIXE");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar a imagem no projeto: {ex.Message}");
        }
    }


    private long GetCurrentUserID(){
        return userID ?? 0;
    }


    protected override async Task OnInitializedAsync(){

        DatabaseQueries dbQuery = new DatabaseQueries(_config, _data);

        if(await dbQuery.GetUser(GetCurrentUserID()) == false){
            NavigationManager.NavigateTo("/notfound");
        }
    }


    private bool validateBasePrice(string basePrice)
    {
        bool valid = double.TryParse(basePrice, out _);

        if (valid)
        {   
            double num = double.Parse(basePrice);
            
            if(num < 50000){
                basePriceFormatError = false;
                return true;
            } else {
                basePriceFormatError = true;
                return false;
            }
        }
        else
        {
            basePriceFormatError = false;
            return true;
        }
    }

    private bool validateAuthNumber(string authNumber)
    {
        bool valid = int.TryParse(authNumber, out _);

        if (valid && authNumber.Length <= 10)
        {   
            authFormatError = false;
            return true;
        }
        else
        {
            basePriceFormatError = false;
            return true;
        }
    }

    private bool validateBuyNow(string buyNowPrice)
    {
        bool valid = double.TryParse(buyNowPrice, out _);

        if (valid)
        {   
            double num = double.Parse(buyNowPrice);
            
            if(num < 100000){
                buyNowFormatError = false;
                return true;
            } else {
                buyNowFormatError = true;
                return false;
            }
        }
        else
        {
            buyNowFormatError = false;
            return true;
        }
    }

    private bool validateIncrement(string incrementPrice)
    {
        bool valid = double.TryParse(incrementPrice, out _);

        if (valid)
        {   
            double num = double.Parse(incrementPrice);
            
            if(num < 1000){
                incrementFormatError = false;
                return true;
            } else {
                incrementFormatError = true;
                return false;
            }
        }
        else
        {
            incrementFormatError = false;
            return true;
        }
    }

    private bool validateDateUse(string date)
    {
        DateTime tempDate;
        bool isValid = DateTime.TryParseExact(date, "yyyy/MM/dd", null, System.Globalization.DateTimeStyles.None, out tempDate);

        if(isValid && tempDate < DateTime.Now)
        {
            // The date is valid and in the past.
            dateUseFormatError = false;
            return true;
        }
        else
        {
            // The date is not valid or not in the past.
            dateUseFormatError = false;
            return true;
        }
    }

    private bool validateDateClosing(string date)
    {
        DateTime tempDate;
        bool isValid = DateTime.TryParseExact(date, "yyyy/MM/dd", null, System.Globalization.DateTimeStyles.None, out tempDate);
    
        if(isValid && tempDate > DateTime.Now.AddDays(1)){
            dateUseFormatError = false;
            return true;
        }
        else{
            dateUseFormatError = true;
            return false;
        }
    }

    private bool ValidateImageFormat(IBrowserFile imagem)
    {
        if (imagem != null)
        {
            string[] allowedExtensions = { ".jpg", ".jpeg", ".png", ".webp" };
            string extension = Path.GetExtension(imagem.Name)?.ToLower();

            return !string.IsNullOrEmpty(extension) && allowedExtensions.Contains(extension);
        }

        // Retorna true se a imagem for nula, já que a validação pode não ser aplicável nesse caso
        return true;
    }

       private bool validateImageFormat(IBrowserFile imagem)
    {
        if (imagem != null)
        {
            string[] allowedExtensions = { ".jpg", ".jpeg", ".png", ".webp" };
            string extension = Path.GetExtension(imagem.Name)?.ToLower();

            if(string.IsNullOrEmpty(extension)||allowedExtensions.Contains(extension)){
                imageError = false;
                return true;
            }
            else{
                imageError = true;
                return false;
            }
        }
        else {
            imageError = true;
            return false;
        }
    }

}