@page "/addItem"
@rendermode InteractiveServer
@inject IConfiguration _config
@inject ISqlDataAccess _data
@using System.Drawing;


@using DataLibrary

<PageTitle>Add Item</PageTitle>

<Header />

<div id="addItem" class="d-flex align-items-center justify-content-center vh-80">
    <div class="card bg-dark text-white">
        <div class="card-body p-5 text-center aux">
            <div class="row row-cols-1">
                <div class="form-outline form-white mb-4 field">
                    <p>Auction Name</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg"  @bind="NomeLeilao" />
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Minimum Bid Amount(€)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="PrecoBaseLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Item Name</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="NomeArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Authentication Number</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="NumeroAutenticacaoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Buy Now Price(€)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="PrecoCompraAutomaticoLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Athlete/Team/Event Name</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="NomeEquipaEventoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Size</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="TamanhoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Minimum Bid Increment(€)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="TaxaMinimaIncrementoLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Description</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="DescricaoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Condition</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="EstadoArtigo"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Date of Use</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="DataUsoArtigo" />
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Auction Closing Date(min. 1 day)</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="DataFinalizacaoLeilao"/>
                </div>
                <div class="form-outline form-white mb-4 field">
                    <p>Category</p>
                    <input type="text" id="typeEmailX" class="form-control form-control-lg" @bind="IdCategoria"/>
                </div>

                @if(nullError)
                {
                    <div class="alert alert-danger" role="alert">
                        Please fill all the fields.
                    </div>
                }

                @if(authNumberError)
                {
                    <div class="alert alert-danger" role="alert">
                        This authentication number is already in use.
                    </div>
                }

                @if(basePriceFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The start price should be less than 50,000€.
                    </div>
                }

                @if(authFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The authentication number must be a number and have no more than 10 digits.
                    </div>
                }

                @if(buyNowFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The buy now price should be less than 100,000€.
                    </div>
                }

                @if(incrementFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The minimum bid increment should be less than 1,000€.
                    </div>
                }

                @if(dateUseFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The date of use must be a valid date and in the past.
                    </div>
                }

                @if(dateClosingFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The auction closing date must be a valid date and at least 1 day in the future.
                    </div>
                }

                @if(categoryFormatError)
                {
                    <div class="alert alert-danger" role="alert">
                        The category must be a number.
                    </div>
                }

                @if(dataError)
                {
                    <div class="alert alert-danger" role="alert">
                        Something went wrong, please try again.
                    </div>
                }

                <div class="button d-flex buttons">
                    <button type="button" class="btn btn-success" @onclick="SubmitForm">SUBMIT</button>
                    <button type="button" class="btn btn-danger">CANCEL</button>
                </div> 
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
<link rel="stylesheet" href="css/addItem.css">

@code {

    public bool nullError { get; set; } = false;

    // Data base duplicate check
    public bool authNumberError { get; set; } = false;

    // Data format check
    public bool basePriceFormatError { get; set; } = false;
    public bool authFormatError { get; set; } = false;
    public bool buyNowFormatError { get; set; } = false;
    public bool incrementFormatError { get; set; } = false;
    public bool dateUseFormatError { get; set; } = false;
    public bool dateClosingFormatError { get; set; } = false; 
    public bool categoryFormatError { get; set; } = false;

    public bool dataError { get; set; } = false;

    // Data
    private string NomeLeilao { get; set; } = string.Empty;
    private byte[] ImagemArtigo { get; set; } = Array.Empty<byte>();
    private string PrecoBaseLeilao { get; set; } = string.Empty;
    private string NomeArtigo { get; set; } = string.Empty;
    private string NumeroAutenticacaoArtigo { get; set; } = string.Empty;
    private string PrecoCompraAutomaticoLeilao { get; set; } = string.Empty;
    private string NomeEquipaEventoArtigo { get; set; } = string.Empty;
    private string TamanhoArtigo { get; set; } = string.Empty;
    private string TaxaMinimaIncrementoLeilao { get; set; } = string.Empty;
    private string DescricaoArtigo { get; set; } = string.Empty;
    private string EstadoArtigo { get; set; } = string.Empty;
    private string DataUsoArtigo { get; set; } = string.Empty;
    private string DataFinalizacaoLeilao { get; set; } = string.Empty;
    private string IdCategoria { get; set; } = string.Empty;

    private async Task SubmitForm()
    {

        // Clearing all errors
        nullError = false;

        authNumberError = false;

        basePriceFormatError = false;
        authFormatError = false;
        buyNowFormatError = false;
        incrementFormatError = false;
        dateUseFormatError = false;
        dateClosingFormatError = false;
        categoryFormatError = false;
        dataError = false;

        DatabaseQueries test = new DatabaseQueries(_config, _data);
        
        if(string.IsNullOrEmpty(NomeLeilao) ||
           string.IsNullOrEmpty(PrecoBaseLeilao) || 
           string.IsNullOrEmpty(NomeArtigo) || 
           string.IsNullOrEmpty(NumeroAutenticacaoArtigo) ||
           string.IsNullOrEmpty(PrecoCompraAutomaticoLeilao) ||
           string.IsNullOrEmpty(NomeEquipaEventoArtigo) ||
           string.IsNullOrEmpty(TamanhoArtigo) ||
           string.IsNullOrEmpty(TaxaMinimaIncrementoLeilao) ||
           string.IsNullOrEmpty(DescricaoArtigo) ||
           string.IsNullOrEmpty(EstadoArtigo) ||
           string.IsNullOrEmpty(DataUsoArtigo) ||
           string.IsNullOrEmpty(DataFinalizacaoLeilao) ||
           string.IsNullOrEmpty(IdCategoria)){

            nullError = true;
            return;
        
        }else{
            if(validateAuthNumber(NumeroAutenticacaoArtigo) &&
               validateBasePrice(PrecoBaseLeilao) &&
               validateBuyNow(PrecoCompraAutomaticoLeilao) &&
               validateIncrement(TaxaMinimaIncrementoLeilao) &&
               validateDateUse(DataUsoArtigo) &&
               validateDateClosing(DataFinalizacaoLeilao) &&
               validateCategory(IdCategoria)){
                
                bool authCheck = await test.isThereAuthNumber(NumeroAutenticacaoArtigo);
                if(authCheck){
                    authNumberError = true;
                    return;
                }
                
                string caminhoDaImagem = "C:/Users/hugoa/Desktop/image.png";
                ImagemArtigo = await CarregarImagem(caminhoDaImagem);
                int rowsAffected = await test.AddItem(NomeLeilao, ImagemArtigo, PrecoBaseLeilao, NomeArtigo, NumeroAutenticacaoArtigo, PrecoCompraAutomaticoLeilao, NomeEquipaEventoArtigo, TamanhoArtigo, TaxaMinimaIncrementoLeilao, DescricaoArtigo, EstadoArtigo, DataUsoArtigo, DataFinalizacaoLeilao);
                //Console.WriteLine(rowsAffected);
                Image imagem = ConverterBinarioParaImagem(ImagemArtigo);
                string caminho = "C:/Users/hugoa/Desktop";
                string nome = "teste1.png";
                SaveImageToFile(imagem, caminho, nome);

                if (rowsAffected > 0)
                {
                    // Redirecting to myAuctions page
                    NavigationManager.NavigateTo("/myAuctions");
                    return;
                }
                else
                {
                    //  Something went wrong but we don't know what, so we just say something went wrong, 
                    // please try again, and we don't redirect, because we don't know what happened, so we 
                    // don't know if it's safe to redirect, so we just stay here, and we don't do anything, 
                    // because we don't know what happened, so we don't know what to do, so we just stay here,
                    // and we don't do anything, because we don't know what happened... 
                    dataError = true;
                    return;
                }
            }    
        }
    }

    private async Task<byte[]> CarregarImagem(string caminho)
{
    try
    {
        Console.WriteLine($"Caminho da imagem: {caminho}");

        using (var stream = new FileStream(caminho, FileMode.Open))
        {
            Console.WriteLine($"Tamanho do arquivo: {stream.Length} bytes");

            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                Console.WriteLine($"Tamanho da memória: {memoryStream.Length} bytes");

                return memoryStream.ToArray();
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erro ao carregar a imagem: {ex.Message}");
        return Array.Empty<byte>();
    }
}

    private Image ConverterBinarioParaImagem(byte[] dadosBinarios)
{
    try
    {
        using (MemoryStream memoryStream = new MemoryStream(dadosBinarios))
        {
            return Image.FromStream(memoryStream);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erro ao converter de binário para imagem: {ex.Message}");
        return null;
    }
}

    private void SaveImageToFile(Image image, string directoryPath, string fileName)
    {
        try
        {
            // Ensure the directory exists
            Directory.CreateDirectory(directoryPath);

            // Combine directory path and file name to get the full file path
            string filePath = Path.Combine(directoryPath, fileName);

            // Save the image to the specified file path
            image.Save(filePath);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving image to file: {ex.Message}");
        }
    }

    private bool validateBasePrice(string basePrice)
    {
        bool valid = double.tryParse(basePrice, out _);

        if (valid)
        {   
            double num = double.Parse(basePrice);
            
            if(num < 50000){
                basePriceFormatError = false;
                return true;
            } else {
                basePriceFormatError = true;
                return false;
            }
        }
        else
        {
            basePriceFormatError = true;
            return false;
        }
    }

    private bool validateAuthNumber(string authNumber)
    {
        bool valid = int.tryParse(authNumber, out _);

        if (valid && authNumber.Length <= 10)
        {   
            authFormatError = false;
            return true;
        }
        else
        {
            basePriceFormatError = true;
            return false;
        }
    }

    private bool validateBuyNow(string buyNowPrice)
    {
        bool valid = double.tryParse(buyNowPrice, out _);

        if (valid)
        {   
            double num = double.Parse(buyNowPrice);
            
            if(num < 100000){
                buyNowFormatError = false;
                return true;
            } else {
                buyNowFormatError = true;
                return false;
            }
        }
        else
        {
            buyNowFormatError = true;
            return false;
        }
    }

    private bool validateIncrement(string incrementPrice)
    {
        bool valid = double.tryParse(incrementPrice, out _);

        if (valid)
        {   
            double num = double.Parse(incrementPrice);
            
            if(num < 1000){
                incrementFormatError = false;
                return true;
            } else {
                incrementFormatError = true;
                return false;
            }
        }
        else
        {
            incrementFormatError = true;
            return false;
        }
    }

    private bool validateDateUse(string date)
    {
        DateTime tempDate;
        bool isValid = DateTime.TryParseExact(date, "yyyy/MM/dd", null, System.Globalization.DateTimeStyles.None, out tempDate);

        if(isValid && tempDate < DateTime.Now)
        {
            // The date is valid and in the past.
            dateUseFormatError = false;
            return true;
        }
        else
        {
            // The date is not valid or not in the past.
            dateUseFormatError = true;
            return false;
        }
    }

    private bool validateDateClosing(string date)
    {
        DateTime tempDate;
        bool isValid = DateTime.TryParseExact(date, "yyyy/MM/dd", null, System.Globalization.DateTimeStyles.None, out tempDate);
    
        if(isValid && tempDate > DateTime.Now.AddDays(1)){
            dateUseFormatError = false;
            return true;
        }
        else{
            dateUseFormatError = true;
            return false;
        }
    }

    private bool validateCategory(string cat)
    {
        bool valid = int.tryParse(cat, out _);

        if (valid)
        {   
            categoryFormatError = false;
            return true;
        }
        else
        {
            categoryFormatError = true;
            return false;
        }
    }

}