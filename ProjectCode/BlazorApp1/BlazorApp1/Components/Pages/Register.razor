@page "/signup"
@rendermode InteractiveServer

@inject IConfiguration _config
@inject ISqlDataAccess _data
@inject NavigationManager NavigationManager

@using DataLibrary

<PageTitle>Register</PageTitle>


<div id="register" class="d-flex align-items-center justify-content-center vh-80">
        <div class="card bg-dark text-white">
            <div class="card-body p-5 text-center aux">
                <img class="mb-4" src="./images/LogoContorno.png" alt="" width="100">
                <h2 class="fw-bold mb-2 text-uppercase">SIGN UP</h2>
                <br/>
                <form>
                    <div class="form-outline form-white mb-4 field1">
                        <label class="form-label" for="typeEmailX">FIRST NAME</label>
                            <input type="text" id="typeEmailX" class="form-control form-control-lg"  @bind="PrimeiroNome"/>
                        </div>
                        <div class="form-outline form-white mb-4 field2">
                            <label class="form-label" for="typePasswordX">LAST NAME</label>
                            <input type="text" id="typePasswordX" class="form-control form-control-lg"  @bind="UltimoNome"/>
                        </div>
                        <div class="form-outline form-white mb-4 field1">
                            <label class="form-label" for="typePasswordX">EMAIL</label>
                            <input type="email" id="typePasswordX" class="form-control form-control-lg"  @bind="Email"/>
                        </div>
                        <div class="form-outline form-white mb-4 field2">
                            <label class="form-label" for="typePasswordX">PASSWORD</label>
                            <input type="password" id="typePasswordX" class="form-control form-control-lg"  @bind="PalavraPasse"/>
                        </div>
                        <div class="form-outline form-white mb-4 field1">
                            <label class="form-label" for="typePasswordX">ADDRESS</label>
                            <input type="text" id="typePasswordX" class="form-control form-control-lg"  @bind="Morada"/>
                        </div>
                        <div class="form-outline form-white mb-4 field2">
                            <label class="form-label" for="typePasswordX">PHONE NUMBER</label>
                            <input type="text" id="typePasswordX" class="form-control form-control-lg"  @bind="NumeroTelemovel"/>
                        </div>
                        <div class="form-outline form-white mb-4">
                            <label class="form-label" for="typePasswordX">BANK IDENTIFICATION NUMBER</label>
                            <input type="text" id="typePasswordX" class="form-control form-control-lg"  @bind="NIB"/>
                        </div>
                    </form>

                    <!--
                        Checkings the data in not null
                    -->

                    @if(nullError){
                        <div class="alert alert-danger" role="alert">
                        Please fill all the fields!
                        </div>
                    }

                    <!--
                        Checkings the data is unique
                    -->

                    @if(nibError){
                        <div class="alert alert-danger" role="alert">
                        Nib already exists!
                        </div>
                    }

                    @if(emailError){
                        <div class="alert alert-danger" role="alert">
                        Email already exists!
                        </div>
                    }

                    @if(phoneError){
                        <div class="alert alert-danger" role="alert">
                        Phone number already exists!
                        </div>
                    }

                    @if(dataError){
                        <div class="alert alert-danger" role="alert">
                        Something went wrong, please try again!
                        </div>
                    } 

                    <!--
                        Checkings the data format
                    -->

                    @if(nibFormatError){
                        <div class="alert alert-danger" role="alert">
                        Nib must be a 9 digit number!
                        </div>
                    }

                    @if(emailFormatError){
                        <div class="alert alert-danger" role="alert">
                        Email must have a valid format!
                        </div>
                    }

                    @if(phoneFormatError){
                        <div class="alert alert-danger" role="alert">
                        Phone number must have 9 digits!
                        </div>
                    }

                    @if(passwordFormatError){
                        <div class="alert alert-danger" role="alert">
                        Password must have between 8 and 20 characters!
                        </div>
                    }

                    <div class="hyperlink">
                        <p class="mb-0">Already have an account? <a href="@("/login")" class="text-blue-50 fw-bold click">Log In</a>!</p>
                        <br/>
                    </div>
                    <div class="sug">
                        <p class="text">Use in portrait mode for a better experience!</p>
                    </div>


                    <div class="button d-flex justify-content-between buttons">
                        <button type="button" class="btn btn-danger">EXIT</button>
                        <button type="button" class="btn btn-success" @onclick="SubmitForm">SUBMIT</button>
                </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
<link rel="stylesheet" href="css/register.css">

@code {

    public bool nullError { get; set; } = false;
    
    // Data base duplicate check
    public bool nibError { get; set; } = false;
    public bool emailError { get; set; } = false;
    public bool phoneError { get; set; } = false;
    public bool dataError { get; set; } = false;

    // Data format check
    public bool nibFormatError { get; set; } = false;
    public bool emailFormatError { get; set; } = false;
    public bool phoneFormatError { get; set; } = false;
    public bool passwordFormatError { get; set; } = false;

    // Data
    private string PrimeiroNome {get; set;} = string.Empty;
    private string UltimoNome {get; set;} = string.Empty;
    private string Email {get; set;} = string.Empty;
    private string PalavraPasse {get; set;} = string.Empty;
    private string Morada {get; set;} = string.Empty;
    private string NumeroTelemovel {get; set;} = string.Empty;
    private string NIB {get; set;} = string.Empty;


    private async Task SubmitForm()
    {
        DatabaseQueries test = new DatabaseQueries(_config, _data);

        nullError = false;

        nibError = false;
        emailError = false;
        phoneError = false;
        dataError = false;

        nibFormatError = false;
        emailFormatError = false;
        phoneFormatError = false;
        passwordFormatError = false;

        if (string.IsNullOrEmpty(PrimeiroNome) || 
            string.IsNullOrEmpty(UltimoNome) || 
            string.IsNullOrEmpty(Email) || 
            string.IsNullOrEmpty(PalavraPasse) || 
            string.IsNullOrEmpty(Morada) || 
            string.IsNullOrEmpty(NumeroTelemovel) || 
            string.IsNullOrEmpty(NIB)){

            nullError = true;
            return;
        } else{

            // Checking data format
            if(validateEmail(Email) && validateNib(NIB) && validatePhone(NumeroTelemovel) && validatePassword(PalavraPasse)){
            
                // Checking data uniqueness
                bool nibCheck = await test.isThereNIB(NIB);
                if (nibCheck){
                    nibError = true;
                    return;
                }

                // Checking data uniqueness
                bool emailCheck = await test.isThereEmail(Email);
                if (emailCheck){
                    emailError = true;
                    return;
                }

                // Checking data uniqueness
                bool phoneCheck = await test.isTherePhoneNumber(NumeroTelemovel);
                if (phoneCheck){
                    phoneError = true;
                    return;
                }
            
                // Registering user
                int rowsAffected = await test.RegisterUser(PrimeiroNome, UltimoNome, Email, PalavraPasse, Morada, NumeroTelemovel, NIB);
                // Checking if user was registered
                if (rowsAffected > 0)
                {
                    // Redirecting to login page
                    NavigationManager.NavigateTo("/login");
                    return;
                }
                else
                {
                    //  Something went wrong but we don't know what, so we just say something went wrong, 
                    // please try again, and we don't redirect, because we don't know what happened, so we 
                    // don't know if it's safe to redirect, so we just stay here, and we don't do anything, 
                    // because we don't know what happened, so we don't know what to do, so we just stay here,
                    // and we don't do anything, because we don't know what happened... 
                    dataError = true;
                    return;
                }
            }
        }


    }

    private bool validateNib(string nib)
    {
        bool valid = int.TryParse(nib, out _);

        if (!valid || nib.Length != 21)
        {
            nibFormatError = true;
            return false;
        }
        else
        {
            nibFormatError = false;
            return true;
        }
    }

    private bool validateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
		{
            emailFormatError = true;
			return false;
		}

		string[] parts = email.Split('@');
		if (parts.Length != 2)
		{
            emailFormatError = true;
			return false; // email must have exactly one @ symbol
		}

		string localPart = parts[0];
		string domainPart = parts[1];
		if (string.IsNullOrWhiteSpace(localPart) || string.IsNullOrWhiteSpace(domainPart))
		{
            emailFormatError = true;
			return false; // local and domain parts cannot be empty
		}

		// check domain part for valid format
		if (domainPart.Length < 2 || !domainPart.Contains(".") || domainPart.Split(".").Length !=2 ||  domainPart.EndsWith(".") || domainPart.StartsWith("."))
		{
            emailFormatError = true;
			return false; // domain part is not a valid format
		}

		return true;
	}
    
    private bool validatePhone(string phone)
    {
        bool valid = int.TryParse(phone, out _);

        if (!valid || phone.Length != 9)
        {
            phoneFormatError = true;
            return false;
        }
        else
        {
            phoneFormatError = false;
            return true;
        }
    }

    private bool validatePassword(string password)
    {
        if (password.Length < 8 || password.Length > 20)
        {
            passwordFormatError = true;
            return false;
        }
        else
        {
            passwordFormatError = false;
            return true;
        }
    }

}
